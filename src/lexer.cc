/* Generated by re2c 0.13.5 */
// Copyright 2011 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "lexer.h"

#include <stdio.h>

#include "eval_env.h"
#include "util.h"
#ifdef __MVS__
# include <unistd.h>
#endif

#ifdef __MVS__
constexpr char EBCDIC2ASCII[] = {
0,1,2,3,156,9,134,127,151,141,142,11,12,13,14,15,16,17,18,19,157,10,8,135,24,25,146,143,28,29,30,31,128,129,130,131,132,133,23,27,136,137,138,139,140,5,6,7,144,145,22,147,148,149,150,4,152,153,154,155,20,21,158,26,32,160,226,228,224,225,227,229,231,241,162,46,60,40,43,124,38,233,234,235,232,237,238,239,236,223,33,36,42,41,59,94,45,47,194,196,192,193,195,197,199,209,166,44,37,95,62,63,248,201,202,203,200,205,206,207,204,96,58,35,64,39,61,34,216,97,98,99,100,101,102,103,104,105,171,187,240,253,254,177,176,106,107,108,109,110,111,112,113,114,170,186,230,184,198,164,181,126,115,116,117,118,119,120,121,122,161,191,208,91,222,174,172,163,165,183,169,167,182,188,189,190,221,168,175,93,180,215,123,65,66,67,68,69,70,71,72,73,173,244,246,242,243,245,125,74,75,76,77,78,79,80,81,82,185,251,252,249,250,255,92,247,83,84,85,86,87,88,89,90,178,212,214,210,211,213,48,49,50,51,52,53,54,55,56,57,179,219,220,217,218
};
# define TO_ASCII(x) EBCDIC2ASCII[(int)(x)]
#else
# define TO_ASCII(x) x
#endif

bool Lexer::Error(const string& message, string* err) {
  // Compute line/column.
  int line = 1;
  const char* line_start = input_.str_;
  for (const char* p = input_.str_; p < last_token_; ++p) {
    if (*p == TO_ASCII('\n')) {
      ++line;
      line_start = p + 1;
    }
  }
  int col = last_token_ ? (int)(last_token_ - line_start) : 0;

  char buf[1024];
  snprintf(buf, sizeof(buf), "%s:%d: ", filename_.AsString().c_str(), line);
  *err = buf;
  *err += message + "\n";

  // Add some context to the message.
  const int kTruncateColumn = 72;
  if (col > 0 && col < kTruncateColumn) {
    int len;
    bool truncated = true;
    for (len = 0; len < kTruncateColumn; ++len) {
      if (line_start[len] == 0 || line_start[len] == TO_ASCII('\n')) {
        truncated = false;
        break;
      }
    }

    string j(line_start, len);
    std::transform(j.begin(), j.end(), j.begin(), [] (char c) -> char {
      char d = c;
      __a2e_l(&d, 1);
      return d;
    });

    *err += j;
    if (truncated)
      *err += "...";
    *err += "\n";
    *err += string(col, ' ');
    *err += "^ near here";
  }

  return false;
}

Lexer::Lexer(const char* input) {
  vector<char> ascii;
  std::transform(input, input + strlen(input) + 1, back_inserter(ascii), [] (char c) -> char {
    char d = c;
    __e2a_l(&d, 1);
    return d;
  });
  Start("input", &ascii[0]);
}

void Lexer::Start(StringPiece filename, StringPiece input) {
  filename_ = filename;
  input_ = input;
  ofs_ = input_.str_;
  last_token_ = NULL;
}

const char* Lexer::TokenName(Token t) {
  switch (t) {
  case ERROR:    return "lexing error";
  case BUILD:    return "'build'";
  case COLON:    return "':'";
  case DEFAULT:  return "'default'";
  case EQUALS:   return "'='";
  case IDENT:    return "identifier";
  case INCLUDE:  return "'include'";
  case INDENT:   return "indent";
  case NEWLINE:  return "newline";
  case PIPE2:    return "'||'";
  case PIPE:     return "'|'";
  case POOL:     return "'pool'";
  case RULE:     return "'rule'";
  case SUBNINJA: return "'subninja'";
  case TEOF:     return "eof";
  }
  return NULL;  // not reached
}

const char* Lexer::TokenErrorHint(Token expected) {
  switch (expected) {
  case COLON:
    return " ($ also escapes ':')";
  default:
    return "";
  }
}

string Lexer::DescribeLastError() {
  if (last_token_) {
    switch (last_token_[0]) {
    case TO_ASCII('\t'):
      return "tabs are not allowed, use spaces";
    }
  }
  return "lexing error";
}

void Lexer::UnreadToken() {
  ofs_ = last_token_;
}

Lexer::Token Lexer::ReadToken() {
  const char* p = ofs_;
  const char* q;
  const char* start;
  Lexer::Token token;
  for (;;) {
    start = p;
    
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,   0,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		192,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  96,  96,  64, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  64,  64,  64,  64,  64,  64, 
		 64,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  64,  64,  64,  64,  96, 
		 64,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
	};

	yych = *p;
	if (yych <= TO_ASCII('Z')) {
		if (yych <= TO_ASCII('#')) {
			if (yych <= TO_ASCII('\f')) {
				if (yych <= 0x00) goto yy23;
				if (yych == TO_ASCII('\n')) goto yy7;
				goto yy25;
			} else {
				if (yych <= 0x1F) {
					if (yych <= TO_ASCII('\r')) goto yy6;
					goto yy25;
				} else {
					if (yych <= TO_ASCII(' ')) goto yy2;
					if (yych <= TO_ASCII('"')) goto yy25;
					goto yy4;
				}
			}
		} else {
			if (yych <= TO_ASCII('9')) {
				if (yych <= TO_ASCII(',')) goto yy25;
				if (yych == TO_ASCII('/')) goto yy25;
				goto yy22;
			} else {
				if (yych <= TO_ASCII('<')) {
					if (yych <= TO_ASCII(':')) goto yy16;
					goto yy25;
				} else {
					if (yych <= TO_ASCII('=')) goto yy14;
printf("here %d\n", __LINE__);
					if (yych <= TO_ASCII('@')) goto yy25;
					goto yy22;
				}
			}
		}
	} else {
		if (yych <= TO_ASCII('i')) {
			if (yych <= TO_ASCII('a')) {
				if (yych == TO_ASCII('_')) goto yy22;
				if (yych <= TO_ASCII('`')) goto yy25;
				goto yy22;
			} else {
				if (yych <= TO_ASCII('c')) {
					if (yych <= TO_ASCII('b')) goto yy9;
					goto yy22;
				} else {
					if (yych <= TO_ASCII('d')) goto yy13;
					if (yych <= TO_ASCII('h')) goto yy22;
					goto yy20;
				}
			}
		} else {
			if (yych <= TO_ASCII('r')) {
				if (yych == TO_ASCII('p')) goto yy11;
				if (yych <= TO_ASCII('q')) goto yy22;
				goto yy12;
			} else {
				if (yych <= TO_ASCII('z')) {
					if (yych <= TO_ASCII('s')) goto yy21;
					goto yy22;
				} else {
					if (yych == TO_ASCII('|')) goto yy18;
					goto yy25;
				}
			}
		}
	}
yy2:
	yyaccept = 0;
	yych = *(q = ++p);
	goto yy73;
yy3:
	{ token = INDENT;   break; }
yy4:
	yyaccept = 1;
	yych = *(q = ++p);
	if (yych >= 0x01) goto yy68;
yy5:
	{ token = ERROR;    break; }
yy6:
	yych = *++p;
	if (yych == TO_ASCII('\n')) goto yy65;
	goto yy5;
yy7:
	++p;
yy8:
	{ token = NEWLINE;  break; }
yy9:
	++p;
	if ((yych = *p) == TO_ASCII('u')) goto yy60;
	goto yy27;
yy10:
	{ token = IDENT;    break; }
yy11:
	yych = *++p;
	if (yych == TO_ASCII('o')) goto yy56;
	goto yy27;
yy12:
	yych = *++p;
	if (yych == TO_ASCII('u')) goto yy52;
	goto yy27;
yy13:
	yych = *++p;
	if (yych == TO_ASCII('e')) goto yy45;
	goto yy27;
yy14:
	++p;
	{ token = EQUALS;   break; }
yy16:
	++p;
	{ token = COLON;    break; }
yy18:
	++p;
	if ((yych = *p) == TO_ASCII('|')) goto yy43;
	{ token = PIPE;     break; }
yy20:
	yych = *++p;
	if (yych == TO_ASCII('n')) goto yy36;
	goto yy27;
yy21:
	yych = *++p;
	if (yych == TO_ASCII('u')) goto yy28;
	goto yy27;
yy22:
	yych = *++p;
	goto yy27;
yy23:
	++p;
	{ token = TEOF;     break; }
yy25:
	yych = *++p;
	goto yy5;
yy26:
	++p;
	yych = *p;
yy27:
	if (yybm[0+yych] & 32) {
		goto yy26;
	}
	goto yy10;
yy28:
	yych = *++p;
	if (yych != TO_ASCII('b')) goto yy27;
	yych = *++p;
	if (yych != TO_ASCII('n')) goto yy27;
	yych = *++p;
	if (yych != TO_ASCII('i')) goto yy27;
	yych = *++p;
	if (yych != TO_ASCII('n')) goto yy27;
	yych = *++p;
	if (yych != TO_ASCII('j')) goto yy27;
	yych = *++p;
	if (yych != TO_ASCII('a')) goto yy27;
	++p;
	if (yybm[0+(yych = *p)] & 32) {
		goto yy26;
	}
	{ token = SUBNINJA; break; }
yy36:
	yych = *++p;
	if (yych != TO_ASCII('c')) goto yy27;
	yych = *++p;
	if (yych != TO_ASCII('l')) goto yy27;
	yych = *++p;
	if (yych != TO_ASCII('u')) goto yy27;
	yych = *++p;
	if (yych != TO_ASCII('d')) goto yy27;
	yych = *++p;
	if (yych != TO_ASCII('e')) goto yy27;
	++p;
	if (yybm[0+(yych = *p)] & 32) {
		goto yy26;
	}
	{ token = INCLUDE;  break; }
yy43:
	++p;
	{ token = PIPE2;    break; }
yy45:
	yych = *++p;
	if (yych != TO_ASCII('f')) goto yy27;
	yych = *++p;
	if (yych != TO_ASCII('a')) goto yy27;
	yych = *++p;
	if (yych != TO_ASCII('u')) goto yy27;
	yych = *++p;
	if (yych != TO_ASCII('l')) goto yy27;
	yych = *++p;
	if (yych != TO_ASCII('t')) goto yy27;
	++p;
	if (yybm[0+(yych = *p)] & 32) {
		goto yy26;
	}
	{ token = DEFAULT;  break; }
yy52:
	yych = *++p;
	if (yych != TO_ASCII('l')) goto yy27;
	yych = *++p;
	if (yych != TO_ASCII('e')) goto yy27;
	++p;
	if (yybm[0+(yych = *p)] & 32) {
		goto yy26;
	}
	{ token = RULE;     break; }
yy56:
	yych = *++p;
	if (yych != TO_ASCII('o')) goto yy27;
	yych = *++p;
	if (yych != TO_ASCII('l')) goto yy27;
	++p;
	if (yybm[0+(yych = *p)] & 32) {
		goto yy26;
	}
	{ token = POOL;     break; }
yy60:
	yych = *++p;
	if (yych != TO_ASCII('i')) goto yy27;
	yych = *++p;
	if (yych != TO_ASCII('l')) goto yy27;
	yych = *++p;
	if (yych != TO_ASCII('d')) goto yy27;
	++p;
	if (yybm[0+(yych = *p)] & 32) {
		goto yy26;
	}
	{ token = BUILD;    break; }
yy65:
	++p;
	{ token = NEWLINE;  break; }
yy67:
	++p;
	yych = *p;
yy68:
	if (yybm[0+yych] & 64) {
		goto yy67;
	}
	if (yych >= 0x01) goto yy70;
yy69:
	p = q;
	if (yyaccept <= 0) {
		goto yy3;
	} else {
		goto yy5;
	}
yy70:
	++p;
	{ continue; }
yy72:
	yyaccept = 0;
	q = ++p;
	yych = *p;
yy73:
	if (yybm[0+yych] & 128) {
		goto yy72;
	}
	if (yych <= TO_ASCII('\f')) {
		if (yych != TO_ASCII('\n')) goto yy3;
	} else {
		if (yych <= TO_ASCII('\r')) goto yy75;
		if (yych == TO_ASCII('#')) goto yy67;
		goto yy3;
	}
	yych = *++p;
	goto yy8;
yy75:
	++p;
	if ((yych = *p) == TO_ASCII('\n')) goto yy65;
	goto yy69;
}

  }

  last_token_ = start;
  ofs_ = p;
  if (token != NEWLINE && token != TEOF)
    EatWhitespace();
  return token;
}

bool Lexer::PeekToken(Token token) {
  Token t = ReadToken();
  if (t == token)
    return true;
  UnreadToken();
  return false;
}

void Lexer::EatWhitespace() {
  const char* p = ofs_;
  const char* q;
  for (;;) {
    ofs_ = p;
    
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	yych = *p;
	if (yych <= TO_ASCII(' ')) {
		if (yych <= 0x00) goto yy82;
		if (yych <= 0x1F) goto yy84;
	} else {
		if (yych == TO_ASCII('$')) goto yy80;
		goto yy84;
	}
	++p;
	yych = *p;
	goto yy92;
yy79:
	{ continue; }
yy80:
	yych = *(q = ++p);
	if (yych == TO_ASCII('\n')) goto yy85;
	if (yych == TO_ASCII('\r')) goto yy87;
yy81:
	{ break; }
yy82:
	++p;
	{ break; }
yy84:
	yych = *++p;
	goto yy81;
yy85:
	++p;
	{ continue; }
yy87:
	yych = *++p;
	if (yych == TO_ASCII('\n')) goto yy89;
	p = q;
	goto yy81;
yy89:
	++p;
	{ continue; }
yy91:
	++p;
	yych = *p;
yy92:
	if (yybm[0+yych] & 128) {
		goto yy91;
	}
	goto yy79;
}

  }
}

bool Lexer::ReadIdent(string* out) {
  const char* p = ofs_;
  const char* start;
  for (;;) {
    start = p;
    
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0, 128, 128,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	yych = *p;
	if (yych <= TO_ASCII('@')) {
		if (yych <= TO_ASCII('.')) {
			if (yych <= TO_ASCII(',')) goto yy97;
		} else {
			if (yych <= TO_ASCII('/')) goto yy97;
			if (yych >= TO_ASCII(':')) goto yy97;
		}
	} else {
		if (yych <= TO_ASCII('_')) {
			if (yych <= TO_ASCII('Z')) goto yy95;
			if (yych <= TO_ASCII('^')) goto yy97;
		} else {
			if (yych <= TO_ASCII('`')) goto yy97;
			if (yych >= TO_ASCII('{')) goto yy97;
		}
	}
yy95:
	++p;
	yych = *p;
	goto yy100;
yy96:
	{
      out->assign(start, p - start);
      break;
    }
yy97:
	++p;
	{
      last_token_ = start;
      return false;
    }
yy99:
	++p;
	yych = *p;
yy100:
	if (yybm[0+yych] & 128) {
		goto yy99;
	}
	goto yy96;
}

  }
  last_token_ = start;
  ofs_ = p;
  EatWhitespace();

#ifdef __MVS__
  std::transform(out->begin(), out->end(), out->begin(), [] (char c) -> char {
    __a2e_l(&c, 1);
    return c;
  });
#endif

  return true;
}

bool Lexer::ReadEvalString(EvalString* eval, bool path, string* err) {
  const char* p = ofs_;
  const char* q;
  const char* start;
  for (;;) {
    start = p;
    
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128,   0, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		 16, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 224, 160, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224,   0, 128, 128, 128, 128, 128, 
		128, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 128, 128, 128, 128, 224, 
		128, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	yych = *p;
	if (yych <= TO_ASCII(' ')) {
		if (yych <= TO_ASCII('\n')) {
			if (yych <= 0x00) goto yy110;
			if (yych >= TO_ASCII('\n')) goto yy107;
		} else {
			if (yych == TO_ASCII('\r')) goto yy105;
			if (yych >= TO_ASCII(' ')) goto yy107;
		}
	} else {
		if (yych <= TO_ASCII('9')) {
			if (yych == TO_ASCII('$')) goto yy109;
		} else {
			if (yych <= TO_ASCII(':')) goto yy107;
			if (yych == TO_ASCII('|')) goto yy107;
		}
	}
	++p;
	yych = *p;
	goto yy140;
yy104:
	{
		vector<char> txt;
		std::transform(start, p, back_inserter(txt), [] (char c) -> char {
				__a2e_l(&c, 1);
				return c;
				});
		eval->AddText(StringPiece(&txt[0], txt.size()));
		continue;
	}
yy105:
	++p;
	if ((yych = *p) == TO_ASCII('\n')) goto yy137;
	{
      last_token_ = start;
      return Error(DescribeLastError(), err);
    }
yy107:
	++p;
	{
      if (path) {
        p = start;
        break;
      } else {
        if (*start == TO_ASCII('\n'))
          break;
	vector<char> txt;
	std::transform(start, start + 1, back_inserter(txt), [] (char c) -> char {
			__a2e_l(&c, 1);
			return c;
			});
        eval->AddText(StringPiece(&txt[0], 1));
        continue;
      }
    }
yy109:
	yych = *++p;
	if (yych <= TO_ASCII('-')) {
		if (yych <= 0x1F) {
			if (yych <= TO_ASCII('\n')) {
				if (yych <= TO_ASCII('\t')) goto yy112;
				goto yy124;
			} else {
				if (yych == TO_ASCII('\r')) goto yy114;
				goto yy112;
			}
		} else {
			if (yych <= TO_ASCII('#')) {
				if (yych <= TO_ASCII(' ')) goto yy115;
				goto yy112;
			} else {
				if (yych <= TO_ASCII('$')) goto yy117;
				if (yych <= TO_ASCII(',')) goto yy112;
				goto yy119;
			}
		}
	} else {
		if (yych <= TO_ASCII('Z')) {
			if (yych <= TO_ASCII('9')) {
				if (yych <= TO_ASCII('/')) goto yy112;
				goto yy119;
			} else {
				if (yych <= TO_ASCII(':')) goto yy121;
				if (yych <= TO_ASCII('@')) goto yy112;
				goto yy119;
			}
		} else {
			if (yych <= TO_ASCII('`')) {
				if (yych == TO_ASCII('_')) goto yy119;
				goto yy112;
			} else {
				if (yych <= TO_ASCII('z')) goto yy119;
				if (yych <= TO_ASCII('{')) goto yy123;
				goto yy112;
			}
		}
	}
yy110:
	++p;
	{
      last_token_ = start;
      return Error("unexpected EOF", err);
    }
yy112:
	++p;
yy113:
	{
      last_token_ = start;
      return Error("bad $-escape (literal $ must be written as $$)", err);
    }
yy114:
	yych = *++p;
	if (yych == TO_ASCII('\n')) goto yy134;
	goto yy113;
yy115:
	++p;
	{
      eval->AddText(StringPiece(" ", 1));
      continue;
    }
yy117:
	++p;
	{
      eval->AddText(StringPiece("$", 1));
      continue;
    }
yy119:
	++p;
	yych = *p;
	goto yy133;
yy120:
	{
	vector<char> txt;
	std::transform(start + 1, p, back_inserter(txt), [] (char c) -> char {
			__a2e_l(&c, 1);
			return c;
			});
      eval->AddSpecial(StringPiece(&txt[0], txt.size()));
      continue;
    }
yy121:
	++p;
	{
      eval->AddText(StringPiece(":", 1));
      continue;
    }
yy123:
	yych = *(q = ++p);
	if (yybm[0+yych] & 32) {
		goto yy127;
	}
	goto yy113;
yy124:
	++p;
	yych = *p;
	if (yybm[0+yych] & 16) {
		goto yy124;
	}
	{
      continue;
    }
yy127:
	++p;
	yych = *p;
	if (yybm[0+yych] & 32) {
		goto yy127;
	}
	if (yych == TO_ASCII('}')) goto yy130;
	p = q;
	goto yy113;
yy130:
	++p;
	{
	vector<char> txt;
	std::transform(start + 2, p - 1, back_inserter(txt), [] (char c) -> char {
			__a2e_l(&c, 1);
			return c;
			});
      eval->AddSpecial(StringPiece(&txt[0], txt.size()));
      continue;
    }
yy132:
	++p;
	yych = *p;
yy133:
	if (yybm[0+yych] & 64) {
		goto yy132;
	}
	goto yy120;
yy134:
	++p;
	yych = *p;
	if (yych == TO_ASCII(' ')) goto yy134;
	{
      continue;
    }
yy137:
	++p;
	{
      if (path)
        p = start;
      break;
    }
yy139:
	++p;
	yych = *p;
yy140:
	if (yybm[0+yych] & 128) {
		goto yy139;
	}
	goto yy104;
}

  }
  last_token_ = start;
  ofs_ = p;
  if (path)
    EatWhitespace();
  // Non-path strings end in newlines, so there's no whitespace to eat.
  return true;
}
